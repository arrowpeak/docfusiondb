name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Trigger release events (for publishing the package)
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Cache Cargo registry and build artifacts
      - name: Cache Cargo registry and target directory
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # 3. Install the Rust toolchain
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # 4. Check formatting with cargo fmt
      - name: Check formatting
        run: cargo fmt -- --check

      # 5. Run Clippy to lint the code
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      # 6. Run cargo audit to check for vulnerable dependencies (optional but recommended)
      - name: Install cargo-audit
        run: cargo install cargo-audit || true
      - name: Run cargo audit
        run: cargo audit

      # 7. Run tests to ensure everything is working
      - name: Run tests
        run: cargo test --all

      # 8. Build the release binary
      - name: Build binary (release)
        run: cargo build --release

      # 9. Build the Docker image
      - name: Build Docker image
        run: docker build -t docfusiondb .

      # 10. Save the Docker image to a tarball for artifact use
      - name: Save Docker image artifact
        run: |
          docker save docfusiondb | gzip > docfusiondb.tar.gz

      # 11. Upload the compiled binary as an artifact
      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: binary
          path: target/release/docfusiondb  # Adjust if your binary has a different name

      # 12. Upload the Docker image tarball as an artifact
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: docfusiondb.tar.gz

      # 13. Optional: Log in to Docker Hub (needed for both push and publish steps)
      - name: Docker Hub Login
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_PASSWORD }}
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 14. Optional: Push the Docker image to Docker Hub on every commit (or you can remove this if you only want to push on release)
      - name: Push Docker image to Docker Hub (for main branch)
        if: ${{ github.ref == 'refs/heads/main' && secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_PASSWORD }}
        run: |
          docker tag docfusiondb ${{ secrets.DOCKERHUB_USERNAME }}/docfusiondb:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/docfusiondb:latest

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'release' }}
    steps:
      # 1. Checkout the repository (again for the publishing job)
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Install the Rust toolchain
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # 3. Publish the crate to crates.io (ensure you have your token in the secret CARGO_REGISTRY_TOKEN)
      - name: Publish crate to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      # 4. Push Docker image tagged with release version to Docker Hub
      - name: Push Docker image to Docker Hub (release)
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_PASSWORD }}
        run: |
          # Tag the image with the release version (from the GitHub release tag)
          docker tag docfusiondb ${{ secrets.DOCKERHUB_USERNAME }}/docfusiondb:${{ github.ref_name }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/docfusiondb:${{ github.ref_name }}
