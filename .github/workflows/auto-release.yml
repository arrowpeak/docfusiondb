name: Auto Release and Tag

permissions:
  contents: write

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'TWEETS.md'
      - 'demo/**'
      - 'scripts/**'
      - '.github/**'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  # Only create release if this is a significant change
  check-for-release:
    name: Check if Release Needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for significant changes
        id: check
        run: |
          # Skip if commit message contains [skip release]
          if git log -1 --pretty=%B | grep -q "\[skip release\]"; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "Skipping release due to [skip release] in commit message"
            exit 0
          fi
          
          # Check if there are changes to source code
          if git diff --name-only HEAD~1 | grep -E '\.(rs|toml)$'; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Source code changes detected, release needed"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No significant changes detected"
          fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check-for-release
    if: needs.check-for-release.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump
        id: version
        run: |
          CURRENT_VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Determine bump type
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            # Auto-determine based on commit messages since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              COMMITS="$(git log --oneline)"
            else
              COMMITS="$(git log ${LAST_TAG}..HEAD --oneline)"
            fi
            
            if echo "$COMMITS" | grep -q -E "(BREAKING|!:|major)"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q -E "(feat|minor)"; then
              BUMP_TYPE="minor"  
            else
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "Bump type: $BUMP_TYPE"
          
          # Calculate new version
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          case $BUMP_TYPE in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Update version in Cargo.toml
        run: |
          CURRENT_VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" Cargo.toml
          
          # Update Cargo.lock
          cargo check --quiet

      - name: Build release binary
        run: |
          cargo build --release

      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          echo "# 🚀 DocFusionDB v${NEW_VERSION}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -z "$LAST_TAG" ]; then
            echo "Initial release of DocFusionDB - a lean experimental document database built in Rust." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## ✨ Features" >> CHANGELOG.md
            echo "- HTTP REST API with authentication" >> CHANGELOG.md
            echo "- Smart query caching with LRU eviction" >> CHANGELOG.md
            echo "- Bulk document operations" >> CHANGELOG.md
            echo "- Custom JSON UDFs for DataFusion" >> CHANGELOG.md
            echo "- Backup/restore functionality" >> CHANGELOG.md
            echo "- Real-time metrics and monitoring" >> CHANGELOG.md
            echo "- Interactive web demo" >> CHANGELOG.md
            echo "- Comprehensive benchmarking tools" >> CHANGELOG.md
          else
            echo "## 📝 Changes since ${LAST_TAG}" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log ${LAST_TAG}..HEAD --pretty=format:"- %s" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## 📊 Performance" >> CHANGELOG.md
          echo "- Single inserts: ~50-200 req/sec" >> CHANGELOG.md
          echo "- Bulk operations: ~500-2000 docs/sec" >> CHANGELOG.md
          echo "- Cached queries: ~200-1000+ req/sec" >> CHANGELOG.md
          echo "- Cache hit latency: <1ms" >> CHANGELOG.md

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          git add Cargo.toml Cargo.lock
          git commit -m "chore: bump version to v${NEW_VERSION} [skip ci]"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"

      - name: Push changes and tag
        run: |
          git push origin main
          git push origin --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: "DocFusionDB v${{ steps.version.outputs.new_version }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            target/release/docfusiondb
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
